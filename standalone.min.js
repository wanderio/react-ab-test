/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = {
	  Experiment: __webpack_require__(1),
	  Variant: __webpack_require__(16),
	  emitter: __webpack_require__(8),
	  experimentDebugger: __webpack_require__(19),
	  mixpanelHelper: __webpack_require__(23),
	  segmentHelper: __webpack_require__(25)
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	module.exports = global["Experiment"] = __webpack_require__(2);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _CoreExperiment = __webpack_require__(4);

	var _CoreExperiment2 = _interopRequireDefault(_CoreExperiment);

	var _emitter = __webpack_require__(8);

	var _emitter2 = _interopRequireDefault(_emitter);

	var _crc = __webpack_require__(18);

	var _crc2 = _interopRequireDefault(_crc);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var store = void 0;

	var noopStore = {
	  getItem: function getItem() {},
	  setItem: function setItem() {}
	};

	if (typeof window !== 'undefined' && 'localStorage' in window && window['localStorage'] !== null) {
	  try {
	    var key = '__pushtell_react__';
	    window.localStorage.setItem(key, key);
	    if (window.localStorage.getItem(key) !== key) {
	      store = noopStore;
	    } else {
	      window.localStorage.removeItem(key);
	      store = window.localStorage;
	    }
	  } catch (e) {
	    store = noopStore;
	  }
	} else {
	  store = noopStore;
	}

	_emitter2.default.addActiveVariantListener(function (experimentName, variantName, skipSave) {
	  if (skipSave) {
	    return;
	  }
	  store.setItem('PUSHTELL-' + experimentName, variantName);
	});

	exports.default = _react2.default.createClass({
	  displayName: "Pushtell.Experiment",
	  propTypes: {
	    name: _react2.default.PropTypes.string.isRequired,
	    defaultVariantName: _react2.default.PropTypes.string,
	    userIdentifier: _react2.default.PropTypes.string
	  },
	  win: function win() {
	    _emitter2.default.emitWin(this.props.name);
	  },
	  getLocalStorageValue: function getLocalStorageValue() {
	    var activeValue = _emitter2.default.getActiveVariant(this.props.name);
	    if (typeof activeValue === "string") {
	      return activeValue;
	    }
	    var storedValue = store.getItem('PUSHTELL-' + this.props.name);
	    if (typeof storedValue === "string") {
	      _emitter2.default.setActiveVariant(this.props.name, storedValue, true);
	      return storedValue;
	    }
	    if (typeof this.props.defaultVariantName === 'string') {
	      _emitter2.default.setActiveVariant(this.props.name, this.props.defaultVariantName);
	      return this.props.defaultVariantName;
	    }
	    var variants = _emitter2.default.getSortedVariants(this.props.name);
	    var weights = _emitter2.default.getSortedVariantWeights(this.props.name);
	    var weightSum = weights.reduce(function (a, b) {
	      return a + b;
	    }, 0);
	    var weightedIndex = typeof this.props.userIdentifier === 'string' ? Math.abs((0, _crc2.default)(this.props.userIdentifier) % weightSum) : Math.floor(Math.random() * weightSum);
	    var randomValue = variants[variants.length - 1];
	    for (var index = 0; index < weights.length; index++) {
	      weightedIndex -= weights[index];
	      if (weightedIndex < 0) {
	        randomValue = variants[index];
	        break;
	      }
	    }
	    _emitter2.default.setActiveVariant(this.props.name, randomValue);
	    return randomValue;
	  },
	  render: function render() {
	    return _react2.default.createElement(_CoreExperiment2.default, _extends({}, this.props, { value: this.getLocalStorageValue }));
	  }
	});
	module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = React;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(6);

	var _warning2 = _interopRequireDefault(_warning);

	var _emitter = __webpack_require__(8);

	var _emitter2 = _interopRequireDefault(_emitter);

	var _Variant = __webpack_require__(16);

	var _Variant2 = _interopRequireDefault(_Variant);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _react2.default.createClass({
	  displayName: "Pushtell.CoreExperiment",
	  propTypes: {
	    name: _react2.default.PropTypes.string.isRequired,
	    value: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.func]).isRequired
	  },
	  win: function win() {
	    _emitter2.default.emitWin(this.props.name);
	  },
	  getInitialState: function getInitialState() {
	    var _this = this;

	    var children = {};
	    _react2.default.Children.forEach(this.props.children, function (element) {
	      if (!_react2.default.isValidElement(element) || element.type.displayName !== "Pushtell.Variant") {
	        var error = new Error("Pushtell Experiment children must be Pushtell Variant components.");
	        error.type = "PUSHTELL_INVALID_CHILD";
	        throw error;
	      }
	      children[element.props.name] = element;
	      _emitter2.default.addExperimentVariant(_this.props.name, element.props.name);
	    });
	    _emitter2.default.emit("variants-loaded", this.props.name);
	    return {
	      variants: children
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.value !== this.props.value || nextProps.children !== this.props.children) {
	      var value = typeof nextProps.value === "function" ? nextProps.value() : nextProps.value;
	      var children = {};
	      _react2.default.Children.forEach(nextProps.children, function (element) {
	        children[element.props.name] = element;
	      });
	      this.setState({
	        value: value,
	        variants: children
	      });
	    }
	  },
	  componentWillMount: function componentWillMount() {
	    var _this2 = this;

	    var value = typeof this.props.value === "function" ? this.props.value() : this.props.value;
	    if (!this.state.variants[value]) {
	      if ("production" !== process.env.NODE_ENV) {
	        (0, _warning2.default)(true, 'Experiment “' + this.props.name + '” does not contain variant “' + value + '”');
	      }
	    }
	    _emitter2.default._incrementActiveExperiments(this.props.name);
	    _emitter2.default.setActiveVariant(this.props.name, value);
	    _emitter2.default._emitPlay(this.props.name, value);
	    this.setState({
	      value: value
	    });
	    this.valueSubscription = _emitter2.default.addActiveVariantListener(this.props.name, function (experimentName, variantName) {
	      _this2.setState({
	        value: variantName
	      });
	    });
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    _emitter2.default._decrementActiveExperiments(this.props.name);
	    this.valueSubscription.remove();
	  },
	  render: function render() {
	    return this.state.variants[this.state.value] || null;
	  }
	});
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 5 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(7);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	module.exports = global["emitter"] = __webpack_require__(9);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _fbemitter = __webpack_require__(10);

	var values = {};
	var experiments = {};
	var experimentWeights = {};
	var activeExperiments = {};
	var experimentsWithDefinedVariants = {};
	var playedExperiments = {};

	var emitter = new _fbemitter.EventEmitter();

	var PushtellEventEmitter = function PushtellEventEmitter() {};

	PushtellEventEmitter.prototype.emitWin = function (experimentName) {
	  if (typeof experimentName !== 'string') {
	    throw new Error("Required argument 'experimentName' should have type 'string'");
	  }
	  emitter.emit("win", experimentName, values[experimentName]);
	};

	PushtellEventEmitter.prototype._emitPlay = function (experimentName, variantName) {
	  if (typeof experimentName !== 'string') {
	    throw new Error("Required argument 'experimentName' should have type 'string'");
	  }
	  if (typeof variantName !== 'string') {
	    throw new Error("Required argument 'variantName' should have type 'string'");
	  }
	  if (!playedExperiments[experimentName]) {
	    emitter.emit('play', experimentName, variantName);
	    playedExperiments[experimentName] = true;
	  }
	};

	PushtellEventEmitter.prototype._resetPlayedExperiments = function () {
	  values = {};
	  playedExperiments = {};
	};

	PushtellEventEmitter.prototype._reset = function () {
	  values = {};
	  experiments = {};
	  experimentWeights = {};
	  activeExperiments = {};
	  experimentsWithDefinedVariants = {};
	  playedExperiments = {};
	};

	PushtellEventEmitter.prototype._incrementActiveExperiments = function (experimentName) {
	  activeExperiments[experimentName] = activeExperiments[experimentName] || 0;
	  activeExperiments[experimentName] += 1;
	  emitter.emit("active", experimentName);
	};

	PushtellEventEmitter.prototype._decrementActiveExperiments = function (experimentName) {
	  activeExperiments[experimentName] -= 1;
	  emitter.emit("inactive", experimentName);
	};

	PushtellEventEmitter.prototype.addActiveVariantListener = function (experimentName, callback) {
	  if (typeof experimentName === "function") {
	    callback = experimentName;
	    return emitter.addListener("active-variant", function (_experimentName, variantName, passthrough) {
	      callback(_experimentName, variantName, passthrough);
	    });
	  }
	  return emitter.addListener("active-variant", function (_experimentName, variantName, passthrough) {
	    if (_experimentName === experimentName) {
	      callback(_experimentName, variantName, passthrough);
	    }
	  });
	};

	PushtellEventEmitter.prototype.emit = function () {
	  return emitter.emit.apply(emitter, arguments);
	};

	PushtellEventEmitter.prototype.addListener = function (eventName, callback) {
	  return emitter.addListener(eventName, callback);
	};

	PushtellEventEmitter.prototype.once = function (eventName, callback) {
	  return emitter.once(eventName, callback);
	};

	PushtellEventEmitter.prototype.addPlayListener = function (experimentName, callback) {
	  if (typeof experimentName === "function") {
	    callback = experimentName;
	    return emitter.addListener('play', function (_experimentName, variantName) {
	      callback(_experimentName, variantName);
	    });
	  }
	  return emitter.addListener('play', function (_experimentName, variantName) {
	    if (_experimentName === experimentName) {
	      callback(_experimentName, variantName);
	    }
	  });
	};

	PushtellEventEmitter.prototype.addWinListener = function (experimentName, callback) {
	  if (typeof experimentName === "function") {
	    callback = experimentName;
	    return emitter.addListener('win', function (_experimentName, variantName) {
	      callback(_experimentName, variantName);
	    });
	  }
	  return emitter.addListener('win', function (_experimentName, variantName) {
	    if (_experimentName === experimentName) {
	      callback(_experimentName, variantName);
	    }
	  });
	};

	PushtellEventEmitter.prototype.defineVariants = function (experimentName, variantNames, variantWeights) {
	  var variantsNamesMap = {};
	  var variantWeightsMap = {};
	  variantNames.forEach(function (variantName) {
	    variantsNamesMap[variantName] = true;
	  });
	  if (Array.isArray(variantWeights)) {
	    if (variantNames.length !== variantWeights.length) {
	      throw new Error("Required argument 'variantNames' should have the same number of elements as optional argument 'variantWeights'");
	    }
	    variantNames.forEach(function (variantName, index) {
	      if (typeof variantWeights[index] !== 'number') {
	        throw new Error("Optional argument 'variantWeights' should be an array of numbers.");
	      }
	      variantWeightsMap[variantName] = variantWeights[index];
	    });
	  } else {
	    variantNames.forEach(function (variantName, index) {
	      variantWeightsMap[variantName] = 1;
	    });
	  }
	  experimentWeights[experimentName] = variantWeightsMap;
	  experiments[experimentName] = variantsNamesMap;
	  experimentsWithDefinedVariants[experimentName] = true;
	};

	PushtellEventEmitter.prototype.getSortedVariants = function (experimentName) {
	  var variantNames = Object.keys(experiments[experimentName]);
	  variantNames.sort();
	  return variantNames;
	};

	PushtellEventEmitter.prototype.getSortedVariantWeights = function (experimentName) {
	  return this.getSortedVariants(experimentName).map(function (variantName) {
	    return experimentWeights[experimentName][variantName];
	  });
	};

	PushtellEventEmitter.prototype.getActiveExperiments = function () {
	  var response = {};
	  Object.keys(activeExperiments).forEach(function (experimentName) {
	    if (activeExperiments[experimentName] === 0) {
	      return;
	    }
	    response[experimentName] = {};
	    Object.keys(experiments[experimentName]).forEach(function (variantName) {
	      response[experimentName][variantName] = values[experimentName] === variantName;
	    });
	  });
	  return response;
	};

	PushtellEventEmitter.prototype.getActiveVariant = function (experimentName) {
	  return values[experimentName];
	};

	PushtellEventEmitter.prototype.setActiveVariant = function (experimentName, variantName, passthrough) {
	  values[experimentName] = variantName;
	  emitter.emit("active-variant", experimentName, variantName, passthrough);
	};

	PushtellEventEmitter.prototype.addExperimentVariant = function (experimentName, variantName) {
	  experiments[experimentName] = experiments[experimentName] || {};
	  experimentWeights[experimentName] = experimentWeights[experimentName] || {};
	  if (experiments[experimentName][variantName] !== true) {
	    if (experimentsWithDefinedVariants[experimentName]) {
	      var error = new Error("Experiment “" + experimentName + "” added new variants after variants were defined.");
	      error.type = "PUSHTELL_INVALID_VARIANT";
	      throw error;
	    }
	    if (values[experimentName]) {
	      var _error = new Error("Experiment “" + experimentName + "” added new variants after a variant was selected. Declare the variant names using emitter.defineVariants(experimentName, variantNames).");
	      _error.type = "PUSHTELL_INVALID_VARIANT";
	      throw _error;
	    }
	    experimentWeights[experimentName][variantName] = 1;
	  }
	  experiments[experimentName][variantName] = true;
	};

	exports.default = new PushtellEventEmitter();
	;
	module.exports = exports['default'];

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	var fbemitter = {
	  EventEmitter: __webpack_require__(11),
	  EmitterSubscription : __webpack_require__(12)
	};

	module.exports = fbemitter;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BaseEventEmitter
	 * @typechecks
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var EmitterSubscription = __webpack_require__(12);
	var EventSubscriptionVendor = __webpack_require__(14);

	var emptyFunction = __webpack_require__(7);
	var invariant = __webpack_require__(15);

	/**
	 * @class BaseEventEmitter
	 * @description
	 * An EventEmitter is responsible for managing a set of listeners and publishing
	 * events to them when it is told that such events happened. In addition to the
	 * data for the given event it also sends a event control object which allows
	 * the listeners/handlers to prevent the default behavior of the given event.
	 *
	 * The emitter is designed to be generic enough to support all the different
	 * contexts in which one might want to emit events. It is a simple multicast
	 * mechanism on top of which extra functionality can be composed. For example, a
	 * more advanced emitter may use an EventHolder and EventFactory.
	 */

	var BaseEventEmitter = (function () {
	  /**
	   * @constructor
	   */

	  function BaseEventEmitter() {
	    _classCallCheck(this, BaseEventEmitter);

	    this._subscriber = new EventSubscriptionVendor();
	    this._currentSubscription = null;
	  }

	  /**
	   * Adds a listener to be invoked when events of the specified type are
	   * emitted. An optional calling context may be provided. The data arguments
	   * emitted will be passed to the listener function.
	   *
	   * TODO: Annotate the listener arg's type. This is tricky because listeners
	   *       can be invoked with varargs.
	   *
	   * @param {string} eventType - Name of the event to listen to
	   * @param {function} listener - Function to invoke when the specified event is
	   *   emitted
	   * @param {*} context - Optional context object to use when invoking the
	   *   listener
	   */

	  BaseEventEmitter.prototype.addListener = function addListener(eventType, listener, context) {
	    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this._subscriber, listener, context));
	  };

	  /**
	   * Similar to addListener, except that the listener is removed after it is
	   * invoked once.
	   *
	   * @param {string} eventType - Name of the event to listen to
	   * @param {function} listener - Function to invoke only once when the
	   *   specified event is emitted
	   * @param {*} context - Optional context object to use when invoking the
	   *   listener
	   */

	  BaseEventEmitter.prototype.once = function once(eventType, listener, context) {
	    var emitter = this;
	    return this.addListener(eventType, function () {
	      emitter.removeCurrentListener();
	      listener.apply(context, arguments);
	    });
	  };

	  /**
	   * Removes all of the registered listeners, including those registered as
	   * listener maps.
	   *
	   * @param {?string} eventType - Optional name of the event whose registered
	   *   listeners to remove
	   */

	  BaseEventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {
	    this._subscriber.removeAllSubscriptions(eventType);
	  };

	  /**
	   * Provides an API that can be called during an eventing cycle to remove the
	   * last listener that was invoked. This allows a developer to provide an event
	   * object that can remove the listener (or listener map) during the
	   * invocation.
	   *
	   * If it is called when not inside of an emitting cycle it will throw.
	   *
	   * @throws {Error} When called not during an eventing cycle
	   *
	   * @example
	   *   var subscription = emitter.addListenerMap({
	   *     someEvent: function(data, event) {
	   *       console.log(data);
	   *       emitter.removeCurrentListener();
	   *     }
	   *   });
	   *
	   *   emitter.emit('someEvent', 'abc'); // logs 'abc'
	   *   emitter.emit('someEvent', 'def'); // does not log anything
	   */

	  BaseEventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {
	    !!!this._currentSubscription ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Not in an emitting cycle; there is no current subscription') : invariant(false) : undefined;
	    this._subscriber.removeSubscription(this._currentSubscription);
	  };

	  /**
	   * Returns an array of listeners that are currently registered for the given
	   * event.
	   *
	   * @param {string} eventType - Name of the event to query
	   * @return {array}
	   */

	  BaseEventEmitter.prototype.listeners = function listeners(eventType) /* TODO: Array<EventSubscription> */{
	    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
	    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
	      return subscription.listener;
	    }) : [];
	  };

	  /**
	   * Emits an event of the given type with the given data. All handlers of that
	   * particular type will be notified.
	   *
	   * @param {string} eventType - Name of the event to emit
	   * @param {*} Arbitrary arguments to be passed to each registered listener
	   *
	   * @example
	   *   emitter.addListener('someEvent', function(message) {
	   *     console.log(message);
	   *   });
	   *
	   *   emitter.emit('someEvent', 'abc'); // logs 'abc'
	   */

	  BaseEventEmitter.prototype.emit = function emit(eventType) {
	    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
	    if (subscriptions) {
	      var keys = Object.keys(subscriptions);
	      for (var ii = 0; ii < keys.length; ii++) {
	        var key = keys[ii];
	        var subscription = subscriptions[key];
	        // The subscription may have been removed during this event loop.
	        if (subscription) {
	          this._currentSubscription = subscription;
	          this.__emitToSubscription.apply(this, [subscription].concat(Array.prototype.slice.call(arguments)));
	        }
	      }
	      this._currentSubscription = null;
	    }
	  };

	  /**
	   * Provides a hook to override how the emitter emits an event to a specific
	   * subscription. This allows you to set up logging and error boundaries
	   * specific to your environment.
	   *
	   * @param {EmitterSubscription} subscription
	   * @param {string} eventType
	   * @param {*} Arbitrary arguments to be passed to each registered listener
	   */

	  BaseEventEmitter.prototype.__emitToSubscription = function __emitToSubscription(subscription, eventType) {
	    var args = Array.prototype.slice.call(arguments, 2);
	    subscription.listener.apply(subscription.context, args);
	  };

	  return BaseEventEmitter;
	})();

	module.exports = BaseEventEmitter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 * 
	 * @providesModule EmitterSubscription
	 * @typechecks
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EventSubscription = __webpack_require__(13);

	/**
	 * EmitterSubscription represents a subscription with listener and context data.
	 */

	var EmitterSubscription = (function (_EventSubscription) {
	  _inherits(EmitterSubscription, _EventSubscription);

	  /**
	   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls
	   *   this subscription
	   * @param {function} listener - Function to invoke when the specified event is
	   *   emitted
	   * @param {*} context - Optional context object to use when invoking the
	   *   listener
	   */

	  function EmitterSubscription(subscriber, listener, context) {
	    _classCallCheck(this, EmitterSubscription);

	    _EventSubscription.call(this, subscriber);
	    this.listener = listener;
	    this.context = context;
	  }

	  return EmitterSubscription;
	})(EventSubscription);

	module.exports = EmitterSubscription;

/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventSubscription
	 * @typechecks
	 */

	'use strict';

	/**
	 * EventSubscription represents a subscription to a particular event. It can
	 * remove its own subscription.
	 */

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var EventSubscription = (function () {

	  /**
	   * @param {EventSubscriptionVendor} subscriber the subscriber that controls
	   *   this subscription.
	   */

	  function EventSubscription(subscriber) {
	    _classCallCheck(this, EventSubscription);

	    this.subscriber = subscriber;
	  }

	  /**
	   * Removes this subscription from the subscriber that controls it.
	   */

	  EventSubscription.prototype.remove = function remove() {
	    if (this.subscriber) {
	      this.subscriber.removeSubscription(this);
	      this.subscriber = null;
	    }
	  };

	  return EventSubscription;
	})();

	module.exports = EventSubscription;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 * 
	 * @providesModule EventSubscriptionVendor
	 * @typechecks
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var invariant = __webpack_require__(15);

	/**
	 * EventSubscriptionVendor stores a set of EventSubscriptions that are
	 * subscribed to a particular event type.
	 */

	var EventSubscriptionVendor = (function () {
	  function EventSubscriptionVendor() {
	    _classCallCheck(this, EventSubscriptionVendor);

	    this._subscriptionsForType = {};
	    this._currentSubscription = null;
	  }

	  /**
	   * Adds a subscription keyed by an event type.
	   *
	   * @param {string} eventType
	   * @param {EventSubscription} subscription
	   */

	  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {
	    !(subscription.subscriber === this) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The subscriber of the subscription is incorrectly set.') : invariant(false) : undefined;
	    if (!this._subscriptionsForType[eventType]) {
	      this._subscriptionsForType[eventType] = [];
	    }
	    var key = this._subscriptionsForType[eventType].length;
	    this._subscriptionsForType[eventType].push(subscription);
	    subscription.eventType = eventType;
	    subscription.key = key;
	    return subscription;
	  };

	  /**
	   * Removes a bulk set of the subscriptions.
	   *
	   * @param {?string} eventType - Optional name of the event type whose
	   *   registered supscriptions to remove, if null remove all subscriptions.
	   */

	  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {
	    if (eventType === undefined) {
	      this._subscriptionsForType = {};
	    } else {
	      delete this._subscriptionsForType[eventType];
	    }
	  };

	  /**
	   * Removes a specific subscription. Instead of calling this function, call
	   * `subscription.remove()` directly.
	   *
	   * @param {object} subscription
	   */

	  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {
	    var eventType = subscription.eventType;
	    var key = subscription.key;

	    var subscriptionsForType = this._subscriptionsForType[eventType];
	    if (subscriptionsForType) {
	      delete subscriptionsForType[key];
	    }
	  };

	  /**
	   * Returns the array of subscriptions that are currently registered for the
	   * given event type.
	   *
	   * Note: This array can be potentially sparse as subscriptions are deleted
	   * from it when they are removed.
	   *
	   * TODO: This returns a nullable array. wat?
	   *
	   * @param {string} eventType
	   * @return {?array}
	   */

	  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {
	    return this._subscriptionsForType[eventType];
	  };

	  return EventSubscriptionVendor;
	})();

	module.exports = EventSubscriptionVendor;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	module.exports = global["Variant"] = __webpack_require__(17);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _react2.default.createClass({
	  displayName: "Pushtell.Variant",
	  propTypes: {
	    name: _react2.default.PropTypes.string.isRequired
	  },
	  render: function render() {
	    if (_react2.default.isValidElement(this.props.children)) {
	      return this.props.children;
	    } else {
	      return _react2.default.createElement(
	        "span",
	        null,
	        this.props.children
	      );
	    }
	  }
	});
	module.exports = exports['default'];

/***/ },
/* 18 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function crc32(str) {
	  /* jslint bitwise: true */
	  var crc = -1;
	  for (var i = 0, len = str.length; i < len; i++) {
	    crc = crc >>> 8 ^ table[(crc ^ str.charCodeAt(i)) & 0xFF];
	  }
	  return ~crc;
	}

	var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];

	if (global.Int32Array !== undefined) {
	  table = new Int32Array(table);
	}

	module.exports = crc32;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	module.exports = global["experimentDebugger"] = __webpack_require__(20);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(21);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _emitter = __webpack_require__(8);

	var _emitter2 = _interopRequireDefault(_emitter);

	var _ExecutionEnvironment = __webpack_require__(22);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	if (process.env.NODE_ENV === "production" || !_ExecutionEnvironment.canUseDOM) {
	  module.exports = {
	    enable: function enable() {},
	    disable: function disable() {}
	  };
	} else {
	  var attachStyleSheet = function attachStyleSheet() {
	    style = document.createElement("style");
	    style.appendChild(document.createTextNode(""));
	    document.head.appendChild(style);
	    function addCSSRule(selector, rules) {
	      if ("insertRule" in style.sheet) {
	        style.sheet.insertRule(selector + "{" + rules + "}", 0);
	      } else if ("addRule" in style.sheet) {
	        style.sheet.addRule(selector, rules, 0);
	      }
	    }
	    addCSSRule("#pushtell-debugger", "z-index: 25000");
	    addCSSRule("#pushtell-debugger", "position: fixed");
	    addCSSRule("#pushtell-debugger", "transform: translateX(-50%)");
	    addCSSRule("#pushtell-debugger", "bottom: 0");
	    addCSSRule("#pushtell-debugger", "left: 50%");
	    addCSSRule("#pushtell-debugger ul", "margin: 0");
	    addCSSRule("#pushtell-debugger ul", "padding: 0 0 0 20px");
	    addCSSRule("#pushtell-debugger li", "margin: 0");
	    addCSSRule("#pushtell-debugger li", "padding: 0");
	    addCSSRule("#pushtell-debugger li", "font-size: 14px");
	    addCSSRule("#pushtell-debugger li", "line-height: 14px");
	    addCSSRule("#pushtell-debugger input", "float: left");
	    addCSSRule("#pushtell-debugger input", "margin: 0 10px 0 0");
	    addCSSRule("#pushtell-debugger input", "padding: 0");
	    addCSSRule("#pushtell-debugger input", "cursor: pointer");
	    addCSSRule("#pushtell-debugger label", "color: #999999");
	    addCSSRule("#pushtell-debugger label", "margin: 0 0 10px 0");
	    addCSSRule("#pushtell-debugger label", "cursor: pointer");
	    addCSSRule("#pushtell-debugger label", "font-weight: normal");
	    addCSSRule("#pushtell-debugger label.active", "color: #000000");
	    addCSSRule("#pushtell-debugger .pushtell-experiment-name", "font-size: 16px");
	    addCSSRule("#pushtell-debugger .pushtell-experiment-name", "color: #000000");
	    addCSSRule("#pushtell-debugger .pushtell-experiment-name", "margin: 0 0 10px 0");
	    addCSSRule("#pushtell-debugger .pushtell-production-build-note", "font-size: 10px");
	    addCSSRule("#pushtell-debugger .pushtell-production-build-note", "color: #999999");
	    addCSSRule("#pushtell-debugger .pushtell-production-build-note", "text-align: center");
	    addCSSRule("#pushtell-debugger .pushtell-production-build-note", "margin: 10px -40px 0 -10px");
	    addCSSRule("#pushtell-debugger .pushtell-production-build-note", "border-top: 1px solid #b3b3b3");
	    addCSSRule("#pushtell-debugger .pushtell-production-build-note", "padding: 10px 10px 5px 10px");
	    addCSSRule("#pushtell-debugger .pushtell-handle", "cursor: pointer");
	    addCSSRule("#pushtell-debugger .pushtell-handle", "padding: 5px 10px 5px 10px");
	    addCSSRule("#pushtell-debugger .pushtell-panel", "padding: 15px 40px 5px 10px");
	    addCSSRule("#pushtell-debugger .pushtell-container", "font-size: 11px");
	    addCSSRule("#pushtell-debugger .pushtell-container", "background-color: #ebebeb");
	    addCSSRule("#pushtell-debugger .pushtell-container", "color: #000000");
	    addCSSRule("#pushtell-debugger .pushtell-container", "box-shadow: 0px 0 5px rgba(0, 0, 0, 0.1)");
	    addCSSRule("#pushtell-debugger .pushtell-container", "border-top: 1px solid #b3b3b3");
	    addCSSRule("#pushtell-debugger .pushtell-container", "border-left: 1px solid #b3b3b3");
	    addCSSRule("#pushtell-debugger .pushtell-container", "border-right: 1px solid #b3b3b3");
	    addCSSRule("#pushtell-debugger .pushtell-container", "border-top-left-radius: 2px");
	    addCSSRule("#pushtell-debugger .pushtell-container", "border-top-right-radius: 2px");
	    addCSSRule("#pushtell-debugger .pushtell-close", "cursor: pointer");
	    addCSSRule("#pushtell-debugger .pushtell-close", "font-size: 16px");
	    addCSSRule("#pushtell-debugger .pushtell-close", "font-weight: bold");
	    addCSSRule("#pushtell-debugger .pushtell-close", "color: #CC0000");
	    addCSSRule("#pushtell-debugger .pushtell-close", "position: absolute");
	    addCSSRule("#pushtell-debugger .pushtell-close", "top: 0px");
	    addCSSRule("#pushtell-debugger .pushtell-close", "right: 7px");
	    addCSSRule("#pushtell-debugger .pushtell-close:hover", "color: #FF0000");
	    addCSSRule("#pushtell-debugger .pushtell-close, #pushtell-debugger label", "transition: all .25s");
	  };

	  var removeStyleSheet = function removeStyleSheet() {
	    if (style !== null) {
	      document.head.removeChild(style);
	      style = null;
	    }
	  };

	  var style = null;

	  var Debugger = _react2.default.createClass({
	    displayName: "Pushtell.Debugger",
	    getInitialState: function getInitialState() {
	      return {
	        experiments: _emitter2.default.getActiveExperiments(),
	        visible: false
	      };
	    },
	    toggleVisibility: function toggleVisibility() {
	      this.setState({
	        visible: !this.state.visible
	      });
	    },
	    updateExperiments: function updateExperiments() {
	      this.setState({
	        experiments: _emitter2.default.getActiveExperiments()
	      });
	    },
	    setActiveVariant: function setActiveVariant(experimentName, variantName) {
	      _emitter2.default.setActiveVariant(experimentName, variantName);
	    },
	    componentWillMount: function componentWillMount() {
	      this.activeSubscription = _emitter2.default.addListener("active", this.updateExperiments);
	      this.inactiveSubscription = _emitter2.default.addListener("inactive", this.updateExperiments);
	    },
	    componentWillUnmount: function componentWillUnmount() {
	      this.activeSubscription.remove();
	      this.inactiveSubscription.remove();
	    },
	    render: function render() {
	      var _this = this;

	      var experimentNames = Object.keys(this.state.experiments);
	      if (this.state.visible) {
	        return _react2.default.createElement(
	          'div',
	          { className: 'pushtell-container pushtell-panel' },
	          _react2.default.createElement(
	            'div',
	            { className: 'pushtell-close', onClick: this.toggleVisibility },
	            '\xD7'
	          ),
	          experimentNames.map(function (experimentName) {
	            var variantNames = Object.keys(_this.state.experiments[experimentName]);
	            if (variantNames.length === 0) {
	              return;
	            }
	            return _react2.default.createElement(
	              'div',
	              { className: 'pushtell-experiment', key: experimentName },
	              _react2.default.createElement(
	                'div',
	                { className: 'pushtell-experiment-name' },
	                experimentName
	              ),
	              _react2.default.createElement(
	                'ul',
	                null,
	                variantNames.map(function (variantName) {
	                  return _react2.default.createElement(
	                    'li',
	                    { key: variantName },
	                    _react2.default.createElement(
	                      'label',
	                      { className: _this.state.experiments[experimentName][variantName] ? "active" : null, onClick: _this.setActiveVariant.bind(_this, experimentName, variantName) },
	                      _react2.default.createElement('input', { type: 'radio', name: experimentName, value: variantName, defaultChecked: _this.state.experiments[experimentName][variantName] }),
	                      variantName
	                    )
	                  );
	                })
	              )
	            );
	          }),
	          _react2.default.createElement(
	            'div',
	            { className: 'pushtell-production-build-note' },
	            'This panel is hidden on production builds.'
	          )
	        );
	      } else if (experimentNames.length > 0) {
	        return _react2.default.createElement(
	          'div',
	          { className: 'pushtell-container pushtell-handle', onClick: this.toggleVisibility },
	          experimentNames.length,
	          ' Active Experiment',
	          experimentNames.length > 1 ? "s" : ""
	        );
	      } else {
	        return null;
	      }
	    }
	  });

	  module.exports = {
	    enable: function enable() {
	      attachStyleSheet();
	      var body = document.getElementsByTagName('body')[0];
	      var container = document.createElement('div');
	      container.id = 'pushtell-debugger';
	      body.appendChild(container);
	      _reactDom2.default.render(_react2.default.createElement(Debugger, null), container);
	    },
	    disable: function disable() {
	      removeStyleSheet();
	      var body = document.getElementsByTagName('body')[0];
	      var container = document.getElementById('pushtell-debugger');
	      if (container) {
	        _reactDom2.default.unmountComponentAtNode(container);
	        body.removeChild(container);
	      }
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = ReactDOM;

/***/ },
/* 22 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	module.exports = global["mixpanelHelper"] = __webpack_require__(24);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _emitter = __webpack_require__(8);

	var _emitter2 = _interopRequireDefault(_emitter);

	var _ExecutionEnvironment = __webpack_require__(22);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var playSubscription = void 0,
	    winSubscription = void 0;

	exports.default = {
	  enable: function enable() {
	    if (_ExecutionEnvironment.canUseDOM) {
	      if (typeof mixpanel === "undefined") {
	        var error = new Error("React A/B Test Mixpanel Helper: 'mixpanel' global is not defined.");
	        error.type = "PUSHTELL_HELPER_MISSING_GLOBAL";
	        throw error;
	      }
	      playSubscription = _emitter2.default.addPlayListener(function (experimentName, variantName) {
	        mixpanel.track("Experiment Play", {
	          "Experiment": experimentName,
	          "Variant": variantName
	        }, function () {
	          _emitter2.default.emit("mixpanel-play", experimentName, variantName);
	        });
	      });
	      winSubscription = _emitter2.default.addWinListener(function (experimentName, variantName) {
	        mixpanel.track("Experiment Win", {
	          "Experiment": experimentName,
	          "Variant": variantName
	        }, function () {
	          _emitter2.default.emit("mixpanel-win", experimentName, variantName);
	        });
	      });
	    }
	  },
	  disable: function disable() {
	    if (_ExecutionEnvironment.canUseDOM) {
	      if (!playSubscription || !winSubscription) {
	        var error = new Error("React A/B Test Mixpanel Helper: Helper was not enabled.");
	        error.type = "PUSHTELL_HELPER_INVALID_DISABLE";
	        throw error;
	      }
	      playSubscription.remove();
	      winSubscription.remove();
	    }
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	module.exports = global["segmentHelper"] = __webpack_require__(26);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _emitter = __webpack_require__(8);

	var _emitter2 = _interopRequireDefault(_emitter);

	var _ExecutionEnvironment = __webpack_require__(22);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var identifySubscription = void 0;

	exports.default = {
	  enable: function enable() {
	    if (_ExecutionEnvironment.canUseDOM) {
	      if (typeof analytics === "undefined") {
	        var error = new Error("React A/B Test Segment Helper: 'analytics' global is not defined.");
	        error.type = "PUSHTELL_HELPER_MISSING_GLOBAL";
	        throw error;
	      }
	      identifySubscription = _emitter2.default.addPlayListener(function (experimentName, variantName) {
	        analytics.identify(_defineProperty({}, experimentName, variantName), function () {
	          return _emitter2.default.emit('segment-play', experimentName, variantName);
	        });
	      });
	    }
	  },
	  disable: function disable() {
	    if (_ExecutionEnvironment.canUseDOM) {
	      if (!playSubscription || !winSubscription) {
	        var error = new Error("React A/B Test Segment Helper: Helper was not enabled.");
	        error.type = "PUSHTELL_HELPER_INVALID_DISABLE";
	        throw error;
	      }
	      identifySubscription.remove();
	    }
	  }
	};
	module.exports = exports['default'];

/***/ }
/******/ ]);